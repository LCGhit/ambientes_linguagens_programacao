* 01
#+begin_src python
def printStars():
    someInt = int(input('Input a number'))
    null = 0
    for x in range(1,someInt+1, 2):
        null = int((someInt-x)/2)
        print(' '*null + '*'*x + ' '*null)
printStars()
#+end_src

* 02
#+begin_src python
  def multiplyElements(list):
      product = 1
      for x in list:
          product = product*x
      print(product)

  multiplyElements([1,2,3,4])
#+end_src

* 03
** PYTHON
#+begin_src python
  def higherNum(list):
      result = 0
      for x in list:
          if(x>result):
              result = x
      print(result)

  higherNum([34,60,101,200])
#+end_src

** CPP
#+begin_src cpp :results output
  #include <iostream>
  #include <vector>

  int higherNum(int my_list[]) {
    int result {0};
    int another_list [8];
    std::cout << &another_list << "\n"
              << &another_list[0] << "\n"
              << &another_list[1] << "\n"
              << 0b101 << "\n"
              << std::endl;
    for (size_t i = 0; i < 7; i++) {
      if (my_list[i] > result) {
        result = my_list[i];
      }
    }
    return result;
  }

  int main() {
    int my_vector[10] {3,5,8,2,1,3,5,8,2,1};
    std::cout << higherNum(my_vector) << std::endl;
    return 0;
  }


#+end_src

#+RESULTS:
: 0x7fff34c6edd0
: 0x7fff34c6edd0
: 0x7fff34c6edd4
: 5
:
: 8

* 04
#+begin_src python :results output
  def addSubMult():
      flag = 'y'
      while(flag == 'y'):
          a = input('Input a number: ')
          b = input('Input a number: ')
          try:
              a = int(a)
              b = int(b)
          except:
              print('Invalid input. We need a number')
          mySum = a+b
          myProd = a*b
          myDif = a-b
          print("Sum: ", mySum, "Product:", myProd, "Difference:", myDif)
          cont = input('Would you like to continue? ')
          if(cont == 'n'):
              flag = 'n'

  addSubMult()
#+end_src

#+RESULTS:
: Input a number:

* 05
#+begin_src python :results output
  import csv

  f = csv.reader(open('alunos.csv'), delimiter=' ', quotechar='|')

  def print_csv_lines(csv_in):
      for row in csv_in:
          print(', '.join(row))


  def count_csv_lines(csv_in):
      counter = 0
      for row in csv_in:
          counter += 1
      return counter


  df = open(r'alunos.csv', encoding='utf-8')
  df = df.readlines()

  new_dic = {}

  headers = df[0].split(',')

  for line in df:
      new_line = line.split(',')
      for i in range(0, len(new_line)):
          new_dic[i] = new_line[i]

  print(new_dic)
#+end_src

#+RESULTS:
: {0: '"a100"', 1: '"Tude Searas"', 2: '"LEI"', 3: '20', 4: '17', 5: '8', 6: '14\n'}

* factorial and binomial
** python
#+begin_src python :results output
  def factorial(num):
      if num == 0:
          num = 1
      if num > 1:
          return num*factorial(num-1)
      else:
          return num


  def binom_1(numerator, denominator):
      result = factorial(numerator)/(factorial(denominator)*factorial(numerator-denominator))
      return result


  def binom_2(numerator, denominator):
      result = (factorial(numerator)/factorial(numerator-denominator))/factorial(denominator)
      return result


  print('binom_1():', binom_1(9, 2))
  print('binom_2():', binom_2(9, 2))
#+end_src

#+RESULTS:
: binom_1(): 36.0
: binom_2(): 36.0
** C++
#+begin_src cpp :results output
  #include <iostream>

  float factorial(float num) {
    if (num == 0) {
        num = 1;
      }
    if (num > 1) {
      return num*factorial(num-1);
    } else {
      return num;
    }
  }

  float binom_1(float numerator, float denominator) {
    float result = factorial(numerator)/(factorial(denominator)*factorial(numerator-denominator));
    return result;
  }

  float binom_2(float numerator, float denominator) {
    float result = factorial(numerator)/(factorial(numerator-denominator))/factorial(denominator);
    return result;
  }

  int main() {
    std::cout << factorial(4) << std::endl;
    std::cout << "binom_1(): " << binom_1(9, 2) << "\n" <<
      "binom_2(): " << binom_2(9,2) << std::endl;
    return 0;
  }


#+end_src

#+RESULTS:
: 24
: binom_1(): 36
: binom_2(): 36
