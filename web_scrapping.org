* [[file:~/Documents/CD/year_2/semester_01/ambientes_linguagens_programacao_cd/teorico_pratica/web_scrapping/ALPCD_BeautifulSoup.pdf][ficha_web_scrapping]]
* ex_01
** a
#+begin_src python :session colab_code :results output
  import json
  import re

  from bs4 import BeautifulSoup

  import requests  # for web scraping


  def get_elements(url, element, attr=None, attr_value=None):
      try:
          headers = {'User-Agent':'alpcd-group1'}
          response = requests.get(url, headers=headers)
          soup = BeautifulSoup(response.text, 'lxml')
      except Exception:
          doc = open(url, encoding='utf-8')
          soup = BeautifulSoup(doc, 'lxml')
      result = soup.find_all(element, {attr: attr_value})
      return result

  cards = get_elements('../teorico_pratica/web_scrapping/exercicio1.html', 'h5', 'class' , 'card-title')
  for card in cards:
      print(card.text)
#+end_src

#+RESULTS:
: Python - Nível iniciado
: Python - Desenvolvimento Web
: Python - Ciência de dados


** f
#+begin_src python :session beautiful_soup_01 :session colab_code :results output
  price_tags = get_elements('https://finance.yahoo.com/', 'h3', 'class', 'clamp tw-line-clamp-none yf-18q3fnf')
  for i in range(0, len(price_tags)):
      price_tags[i] = re.sub(r'[a-zA-Z]+', '', price_tags[i].text)

  for i in range(0, len(price_tags)):
      print(f'Curso: {cards[i].text} Preço: {price_tags[i].text}')

#+end_src

#+RESULTS:
#+begin_example
    — '
  344
'
     $1.5   -

    ' '
      '
   $3          ,
 '
       -
           $100,000
     ,

     ,

  :   $400    40,000
,     '    $100,000
' !!!':        $100,000
     (12/5) -
 ' 30-
     —         ?
    ,
#+end_example

#+begin_src python :session beautiful_soup_01 :results output
  name_price = get_elements('div', 'card-body')
  for i in range(0, len(name_price)):
      print(name_price[i].find('h5').text,
            re.sub(r'([a-zA-Z|\s]+)([0-9]+)', r'\2', name_price[i].find('a').text))

#+end_src

#+RESULTS:
: Python - Nível iniciado 20€
: Python - Desenvolvimento Web 5€
: Python - Ciência de dados 100$

* ex_02 (from google colab)
** a) b)
#+begin_src python :session beautiful_soup_01 :results output
  rows = get_elements('a', 'ticker')
  result = []
  for row in rows:
      new = re.search(r'([A-Z]+)(\-[A-Z]{3})', row.text).group(1)
      print(new)
  #     result.append(new.group(1))
  # for element in result:
  #     print(element)
  # print('arstarst')
#+end_src

#+RESULTS:

*** second resolution
#+begin_src python :session colab_code :results output
  import requests
  from bs4 import BeautifulSoup


  def request_data(header, path):  # faz o import dos dados da página web
      url = f"{header}{path}"

      headers = {'User-Agent':'alpcd-group1'}
      payload = {}
      print('here', url)
      try:
          response = requests.get(url, headers=headers, data=payload)

          if response.status_code == 200:
              soup = BeautifulSoup(response.text, "lxml")
              return soup
          else:
              print(f"Erro {response.status_code} - {response.text}")
              return None

      except requests.exceptions.RequestException as e:
          print(f"Erro na requisição: {e}")
          return None

  soup = request_data('https://finance.yahoo.com/', path='crypto')
#+end_src

#+RESULTS:
: here https://finance.yahoo.com/crypto

** c)
#+begin_src python :session colab_code :results output
  from bs4 import BeautifulSoup
  import re
  from datetime import datetime

  def request_fun(upper_limit, count):
      soup = request_data('https://finance.yahoo.com/', path=f'markets/crypto/all/?start={upper_limit-count}&count={count}')
      linhas = soup.find_all('tr')

      dados = []

      for linha in linhas[1:]:
          newDict = {}
          colunas = linha.find_all('td')

          acronimo = colunas[0].text
          acronimo_limpo = re.sub(r'\s+','',acronimo) #retirar os espaços
          acronimo2 = re.sub(r'(\s+)([a-z|A-Z|0-9|\-]+)(\s+)', r'\2', acronimo)
          newDict['acronimo'] = acronimo2

          nome = colunas[1].text
          nome_limpo = re.sub(r'\s{2,}', '', nome)
          newDict['nome'] = nome_limpo
          preco = float(colunas[3].find(attrs={'data-field':'regularMarketPrice'})['data-value'])
          newDict['preco'] = preco
          data = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
          newDict['data'] = data
          dados.append(newDict)
      return dados
#+end_src

#+RESULTS:


** f)
#+begin_src python :session study :results output
  import re
  import requests
  from bs4 import BeautifulSoup

  def soupRequest(url):
      try:
          response = requests.get(url, headers={'user-agent':'mozilla'})
          if (response.status_code == 200):
              soup = BeautifulSoup(response.text, 'lxml')
              return soup
          else:
              print(f'Erro {response.status_code} - {response.text}')
              return None
      except requests.exceptions.RequestException as e:
          print(f'Erro na requisição: {e}')
          return None

  def searchSoup(url, element, attribute, attr_value=''):
      soup = soupRequest(url)
      result = soup.find_all(element, {attribute: attr_value})
      return result

  coins = searchSoup('https://finance.yahoo.com/quote/crm?p=1', 'fin-streamer', 'data-field', 'regularMarketOpen')

  for element in coins:
      print(element.text)

#+end_src

#+RESULTS:
: 360.78

* ex_02
** c)
#+begin_src python :session colab_code :results output
  from datetime import datetime


  sigla = get_elements('https://finance.yahoo.com/crypto',
                       'span', 'class', 'symbol yf-1m808gl')
  nome = get_elements('https://finance.yahoo.com/crypto',
                      'div', 'class', 'tw-pl-4 yf-h8l7j7')
  preco = get_elements('https://finance.yahoo.com/crypto',
                       'fin-streamer', 'data-field', 'regularMarketPrice')
  coin_dict = []
  for i in range(len(sigla)):
      coin_dict.append(
          {
              'sigla': sigla[i].text,
              'nome': nome[i].text,
              'preco': preco[i].text,
              'data_da_leitura': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
          }
      )
  for i in range(len(coin_dict)):
      print(coin_dict[i])

#+end_src

#+RESULTS:
#+begin_example
{'sigla': 'BTC-USD ', 'nome': 'Bitcoin USD ', 'preco': '101,437.47', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'ETH-USD ', 'nome': 'Ethereum USD ', 'preco': '3,828.17', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'USDT-USD ', 'nome': 'Tether USDt USD ', 'preco': '1.0010', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'XRP-USD ', 'nome': 'XRP USD ', 'preco': '2.4234', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'SOL-USD ', 'nome': 'Solana USD ', 'preco': '230.42', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'BNB-USD ', 'nome': 'BNB USD ', 'preco': '708.08', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'DOGE-USD ', 'nome': 'Dogecoin USD ', 'preco': '0.416880', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'USDC-USD ', 'nome': 'USD Coin USD ', 'preco': '0.999988', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'ADA-USD ', 'nome': 'Cardano USD ', 'preco': '1.0853', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'STETH-USD ', 'nome': 'Lido Staked ETH USD ', 'preco': '3,825.43', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'WTRX-USD ', 'nome': 'Wrapped TRON USD ', 'preco': '0.281207', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'TRX-USD ', 'nome': 'TRON USD ', 'preco': '0.281341', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'AVAX-USD ', 'nome': 'Avalanche USD ', 'preco': '47.93', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'SHIB-USD ', 'nome': 'Shiba Inu USD ', 'preco': '0.000029', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'WSTETH-USD ', 'nome': 'Lido wstETH USD ', 'preco': '4,488.16', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'TON11419-USD ', 'nome': 'Toncoin USD ', 'preco': '6.3000', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'LINK-USD ', 'nome': 'Chainlink USD ', 'preco': '23.89', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'DOT-USD ', 'nome': 'Polkadot USD ', 'preco': '9.0605', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'WBTC-USD ', 'nome': 'Wrapped Bitcoin USD ', 'preco': '100,756.54', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'XLM-USD ', 'nome': 'Stellar USD ', 'preco': '0.433063', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'WETH-USD ', 'nome': 'WETH USD ', 'preco': '3,809.17', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'SUI20947-USD ', 'nome': 'Sui USD ', 'preco': '4.3278', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'HBAR-USD ', 'nome': 'Hedera USD ', 'preco': '0.298628', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'BCH-USD ', 'nome': 'Bitcoin Cash USD ', 'preco': '544.58', 'data_da_leitura': '2024-12-11 20:31:10'}
{'sigla': 'PEPE24478-USD ', 'nome': 'Pepe USD ', 'preco': '0.000025', 'data_da_leitura': '2024-12-11 20:31:10'}
#+end_example

** d)
#+begin_src python :session colab_code :results output
  def recursive_request(upper_limit, lower_limit, count):
      if upper_limit-count > lower_limit:
          return recursive_request(upper_limit-count, lower_limit, count)+request_fun(upper_limit, count)
      else:
          return request_fun(upper_limit, upper_limit-lower_limit)

  entries_total = get_elements('div', 'total', 'https://finance.yahoo.com/markets/crypto/all')
  entries_total = int(re.search(r'([a-zA-Z]+\s([0-9]+))', result[0].text).group(2))
  print(len(entries_total))
  print(len(recursive_request(entries_total, entries_total-250, 100)))

#+end_src

#+RESULTS:

** e)
#+begin_src python :session colab_code :results output
  import csv


  keys = coin_dict[0].keys()
  with open('coins.csv', 'w', newline='') as output_file:
      dict_writer = csv.writer(output_file)
      dict_writer.writerow(keys)
      for dictionary in coin_dict:
          dict_writer.writerow(dictionary.values())
#+end_src

#+RESULTS:

* ex_03
*** chatgpt code
#+begin_src python :results output
  import re
  import requests
  from bs4 import BeautifulSoup

  # URL for the updated Yahoo Finance Crypto page
  url = 'https://finance.yahoo.com/markets/crypto/all/'

  # Send a GET request to the website
  response = requests.get(url)

  # Check if the request was successful (status code 200)
  if response.status_code == 200:
      # Parse the HTML content of the page
      soup = BeautifulSoup(response.content, 'html.parser')

      # Find the table containing the cryptocurrency data
      table = soup.find('table', {'class': 'markets-table freeze-col yf-paf8n5 fixedLayout'})

      if table:
          # Iterate through each row in the table (excluding the header row)
          rows = table.find_all('tr')[1:]

          # Extract and print the desired data from each row
          for row in rows:
              columns = row.find_all('td')

              # Ensure we have the correct number of columns (6 columns)
              if len(columns) >= 6:
                  name = columns[0].get_text(strip=True)
                  symbol = columns[1].get_text(strip=True)
                  market_cap = columns[3].get_text(strip=True)
                  values = re.split(r'[\+-]\(?', market_cap)
                  price = values[0]
                  change = values[1]
                  volume = columns[5].get_text(strip=True)

                  # Print the extracted information
                  print(f"Name: {name}, Symbol: {symbol}, Price: {price}, Change: {change}, Market Cap: {market_cap}, Volume: {volume}")
      else:
          print("Could not find the table containing cryptocurrency data.")
  else:
      print(f"Failed to retrieve the page. Status code: {response.status_code}")

#+end_src

#+RESULTS:
#+begin_example
Name: BTC-USD, Symbol: Bitcoin USD, Price: 99,394.39, Change: 1,870.45(, Market Cap: 99,394.39+1,870.45(+1.92%), Volume: +1.92%
Name: ETH-USD, Symbol: Ethereum USD, Price: 3,766.39, Change: 100.54(, Market Cap: 3,766.39+100.54(+2.74%), Volume: +2.74%
Name: USDT-USD, Symbol: Tether USDt USD, Price: 1.0007, Change: 0.0003(, Market Cap: 1.0007+0.0003(+0.03%), Volume: +0.03%
Name: XRP-USD, Symbol: XRP USD, Price: 2.4254, Change: 0.2341(, Market Cap: 2.4254+0.2341(+10.69%), Volume: +10.69%
Name: SOL-USD, Symbol: Solana USD, Price: 227.25, Change: 10.44(, Market Cap: 227.25+10.44(+4.82%), Volume: +4.82%
Name: BNB-USD, Symbol: BNB USD, Price: 691.73, Change: 2.43(, Market Cap: 691.73+2.43(+0.35%), Volume: +0.35%
Name: DOGE-USD, Symbol: Dogecoin USD, Price: 0.408293, Change: 0.006776(, Market Cap: 0.408293+0.006776(+1.69%), Volume: +1.69%
Name: USDC-USD, Symbol: USD Coin USD, Price: 1.0002, Change: 0.0002(, Market Cap: 1.0002+0.0002(+0.02%), Volume: +0.02%
Name: ADA-USD, Symbol: Cardano USD, Price: 1.0890, Change: 0.0821(, Market Cap: 1.0890+0.0821(+8.15%), Volume: +8.15%
Name: STETH-USD, Symbol: Lido Staked ETH USD, Price: 3,771.90, Change: 86.75(, Market Cap: 3,771.90+86.75(+2.35%), Volume: +2.35%
Name: WTRX-USD, Symbol: Wrapped TRON USD, Price: 0.279244, Change: 0.010038(, Market Cap: 0.279244+0.010038(+3.73%), Volume: +3.73%
Name: TRX-USD, Symbol: TRON USD, Price: 0.279691, Change: 0.011722(, Market Cap: 0.279691+0.011722(+4.37%), Volume: +4.37%
Name: AVAX-USD, Symbol: Avalanche USD, Price: 47.47, Change: 2.36(, Market Cap: 47.47+2.36(+5.22%), Volume: +5.22%
Name: SHIB-USD, Symbol: Shiba Inu USD, Price: 0.000028, Change: 0.000002(, Market Cap: 0.000028+0.000002(+6.30%), Volume: +6.30%
Name: WSTETH-USD, Symbol: Lido wstETH USD, Price: 4,433.96, Change: 38.34(, Market Cap: 4,433.96+38.34(+0.87%), Volume: +0.87%
Name: TON11419-USD, Symbol: Toncoin USD, Price: 6.2453, Change: 0.4292(, Market Cap: 6.2453+0.4292(+7.38%), Volume: +7.38%
Name: LINK-USD, Symbol: Chainlink USD, Price: 23.72, Change: 1.19(, Market Cap: 23.72+1.19(+5.29%), Volume: +5.29%
Name: DOT-USD, Symbol: Polkadot USD, Price: 9.1834, Change: 0.8079(, Market Cap: 9.1834+0.8079(+9.65%), Volume: +9.65%
Name: WBTC-USD, Symbol: Wrapped Bitcoin USD, Price: 98,797.98, Change: 1,300.62(, Market Cap: 98,797.98+1,300.62(+1.33%), Volume: +1.33%
Name: XLM-USD, Symbol: Stellar USD, Price: 0.432020, Change: 0.027438(, Market Cap: 0.432020+0.027438(+6.78%), Volume: +6.78%
Name: WETH-USD, Symbol: WETH USD, Price: 3,742.79, Change: 38.46(, Market Cap: 3,742.79+38.46(+1.04%), Volume: +1.04%
Name: HBAR-USD, Symbol: Hedera USD, Price: 0.301627, Change: 0.016428(, Market Cap: 0.301627+0.016428(+5.76%), Volume: +5.76%
Name: SUI20947-USD, Symbol: Sui USD, Price: 3.8606, Change: 0.0091(, Market Cap: 3.8606+0.0091(+0.24%), Volume: +0.24%
Name: BCH-USD, Symbol: Bitcoin Cash USD, Price: 542.17, Change: 16.82(, Market Cap: 542.17+16.82(+3.20%), Volume: +3.20%
Name: PEPE24478-USD, Symbol: Pepe USD, Price: 0.000024, Change: 0.000001(, Market Cap: 0.000024-0.000001(-3.72%), Volume: -3.72%
#+end_example

* study
** new
#+begin_src python :results output
  import re
  import requests
  from bs4 import BeautifulSoup

  myDict = {'like': }
  file = open('quest4.html')
  # response = requests.get(url, headers={'user-agent':'mozilla'})
  soup = BeautifulSoup(file, 'lxml')
  soup_result_01 = soup.find('span')
  soup_result_02 = soup.find_all('div', {'class': 'user-info'})
  soup_result_03 = soup_result_02[0].find('span')

  likes = soup.find('div', {'class':'post-buttons'})
  mySpan = likes.find('span')
  myDict['likes'].append(re.search(r'\d+', mySpan.text)[0])
  print(myDict)
#+end_src

#+RESULTS:
: {'likes': ['10']}
